教程、函数、高级教程

小程序的：介绍、设计、开发

----------------------------------------------------------------
-1> 直接写入HTML输出流
document.write("<h1>这是一个标题</h1>");

----------------------------------------------------------------
-2> 对事件的反应
<button type="button" onclick="alert('去年')">敢点？</button>

**
alert()弹出页面小窗口
**

----------------------------------------------------------------
-3> 改变HTML内容
x=document.getElementById("demo")  //查找元素
x.innerHTML="去年买了个表";        //更改内容

**
document.getElementByld("demo")是使用id属性来查找HTML元素的JavaScript代码
innerHTML="Paragraph changed."是用于修改元素的HTML内容(innerHTML)的JavaScript代码
**

----------------------------------------------------------------
-4> 数据类型
字符串(String)、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空(Null)、未定义(Undefined)

**
极大或极小的数字可以通过科学(指数)计数法来书写
var a=123e5；  // 12300000     【在这里e5表示小数点后退5位】
var b=123e-5； // 0.00123      【在这里e5表示小数点前进5位】

布尔(逻辑判断)只能有两个值：true 或 false (对 或 错)
**

----------------------------------------------------------------
-5> 三种方法创建名为cars的Array(数组)

1) var cars=new Array()
cars[0]="Saab";
cars[1]="Volvo";
cars[2]="BMW";

2) var cars=new Array("Saab","Volvo","BMW");

3) var cars=["Saab","Volvo","BMW"];

***
数组下标是基于0的，所以第一个项目是[0]，第二个是[1]，以此类推。

// 括号内为单个数字时
var cars= new Array(5); // 此处 5 表示数组的长度
形同
var cars = [undefined, undefined, undefined, undefined, undefined]

// 括号内为多个数字时
var cars= new Array(5, 2); // 此处 5 不再表示数组长度，而是它的其中一个元素
形同
var cars = [5, 2]
***

----------------------------------------------------------------
-6> 对象的属性以名称和值对的形式(name:value)来定义

var person={firstname:"John", lastname:"Doe",id:5566};

表示对象person有三个属性firstname、lastname、id分别对应各自冒号后的值。

另一写法(空格和折行无关紧要)：

var person={
firstname : "John";
lastname  : "Doe",
id        : 5566
};

**
对象属性的寻址方式：
name=person.lastname;
或
name=person["lastname"];
**

----------------------------------------------------------------
-7> Undefined(未找到) 和 Null(变量已被清空)
var a=5；          // 赋予a值为5
var a=null;    //清空a的值，不是指空白(空白也是值的一种)

**
声明新变量时，可以使用关键词"new"来声明其类型：
var carname = new String;
var x = nwe Number;
var y = new Boolean;
var cars = new Array;
var person  = new Object;
**

----------------------------------------------------------------
----------------------------------------------------------------
问题：计算<p id="abb">你是一个大傻逼！</p>中abb的 length 属性？

abb 在这表示的是 <p></p>这个段落，不具有 lenght 属性
----------------------------------------------------------------
----------------------------------------------------------------

-8> 字符串属性

constructor	返回创建字符串属性的函数

length		返回字符串的长度

prototype	允许您向对象添加属性和方法

----------------------------------------------------------------
-9> 字符串方法

charAt()	返回指定索引位置的字符

charCodeAt()	返回指定位置字符的Unicode值

concat()	连接两个或多个字符串，返回连接后的字符串

fromCharCode()	将字符转换为Unicode值

indexOf()	返回字符串中检索指定字符第一次出现的位置

lastIndexOf()	返回字符串中检索指定字符最后一次出来的位置

localeCompare()	用本地特定的顺序来比较两个字符串

match()		找到一个或多个正则表达式的匹配

replace()	替换与正则表达式匹配的子串

search()	检索与正则表达式相匹配的值

slice()		提取字符串的片断，并在新的字符串中返回被提取的部分

split()		把字符串分割为子字符串数组

substr()	从起始索引号提取字符串中指定数目的字符

substring()	提取字符串中两个指定的索引号之间的字符

toLocaleLowerCase()	根据主机的语言环境把字符串转换为小写，只有几种语言(如土耳其语)具有地方特有的大小写映射

toLocaleUpperCase()	根据主机的语言环境把字符串转换为大写，只有几种语言(如土耳其语)具有地方特有的大小写映射

toLowerCase()	把字符串转换为小写

toString()	返回字符串对象值

toUpperCase()	把字符串转换为大写

trim()		移除字符串首尾空白

valueOf()	返回某个字符串对象的原始值

----------------------------------------------------------------
-10> 算术运算符<以下初始y=5，取模即为余数>

运算符	描述	例子	x结果	y结果

+	加法	x=y+2	7	5

-	减法	x=y-2	3	5

*	乘法	x=y*2	10	5

/	除法	x=y/2	2.5	5

%	取模	x=y%2	1	5

++	自增	x=++y	6	6
		x=y++	5	6

--	自减	x=--y	4	4
		x=y--	5	4

----------------------------------------------------------------
-11> 赋值运算符<以下初始x=10且y=5>

运算符	例子	等同于	x运算结果

=	x=y		5

+=	x+=y	x=x+y	15

-=	x-+y	x=x-y	5

*=	x*=y	x=x*y	50

/=	x/=y	x=x/y	2

%=	x%=y	x=x%y	0

**
数字和字符串相加，返回字符串

x="abb"+3，x的输出结果是abb3
**

----------------------------------------------------------------
-12> 比较运算符<以下是在x=5的情况下进行比较>

运算符	描述	比较	返回值

==	等于	x==8	false
		x==5	true

===	绝对等	x==="5"	false
		x===5	true

!=	不等于	x!=8	true

!==	绝不等	x!=="5"	true
		x!==5	false

>	大于	x>8	false

<	小于	x<8	true

>=	大或等	x>=8	false

<=	小或等	x<=8	true

----------------------------------------------------------------
-13> 逻辑运算符<以下是在x=6且y=3的情况下进行>

运算符	描述	例子

&&	and	(x<10&&y>1)为true

||	or	(x==5||y==5)为false

!	not	!(x==y)为true

**
条件运算符，符合条件赋第一个值，不满足赋第二个值

用法：variablename=(condition)?value1:value2，例如

voteable=(age<18)?"年龄太小":"年龄达到";
如果变量 age 中的值小于 18，则向变量 voteable 赋值 "年龄太小"，否则赋值 "年龄已达到"。
**

----------------------------------------------------------------
----------------------------------------------------------------
----------------------------------------------------------------
-14> if 语句，请使用小写的 if。使用大写字母（IF）会生成 JavaScript 错误！语法：

if (condition)
{
    当条件为 true 时执行的代码
}

----------------------------------------------------------------
-15> if...else 语句，语法：

if (condition)
{
    当条件为 true 时执行的代码
}
else
{
    当条件不为 true 时执行的代码
}

----------------------------------------------------------------
-16> if...else if...else 语句，选择多个代码块之一来执行，语法：

if (condition1)
{
    当条件 1 为 true 时执行的代码
}
else if (condition2)
{
    当条件 2 为 true 时执行的代码
}
else
{
  当条件 1 和 条件 2 都不为 true 时执行的代码
}

----------------------------------------------------------------
-17> JavaScript switch 语句，选择多个代码块之一来执行，语法：

switch(n)
{
    case 1:
        执行代码块 1
        break;
    case 2:
        执行代码块 2
        break;
    default:
        与 case 1 和 case 2 不同时执行的代码
}

***
default 关键词，请使用 default 关键词来规定匹配不存在时做的事情。
***

----------------------------------------------------------------
-18> For 循环，语法：

for (语句 1; 语句 2; 语句 3)
{
    被执行的代码块
}

***
For/In 循环，循环遍历对象的属性。语法：

var person={fname:"John",lname:"Doe",age:25}; 
 
for (x in person)  // x 为属性名
{
    txt=txt + person[x];
}
***

----------------------------------------------------------------
-19> while循环，在指定条件为真时循环执行代码块。语法：

while (条件)
{
    需要执行的代码
}

***
do/while 循环，在检查条件是否为真之前执行一次代码块，然后如果条件为真的话，就会重复这个循环。用法：

do
{
    需要执行的代码
}
while (条件);
***

----------------------------------------------------------------
-20> Break 语句，break 语句用于跳出循环，并且会继续执行该循环之后的代码（如果有的话）。例

for (i=0;i<10;i++)
{
    if (i==3)
    {
        break;
    }
    x=x + "The number is " + i + "<br>";
}

结果是
The number is 0
The number is 1
The number is 2

----------------------------------------------------------------
-21> Continue 语句，中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。 例

for (i=0;i<=10;i++)
{
    if (i==3) continue;
    x=x + "The number is " + i + "<br>";
}

这里结果是0到9，但会跳过3的结果

----------------------------------------------------------------
-22> JavaScript 标签，语法：

label:
statements

***代码块区域 statements 可以由 label表示***

实例

cars=["BMW","Volvo","Saab","Ford"];
list: 
{
    document.write(cars[0] + "<br>"); 
    document.write(cars[1] + "<br>"); 
    document.write(cars[2] + "<br>"); 
    break list;
    document.write(cars[3] + "<br>"); 
    document.write(cars[4] + "<br>"); 
    document.write(cars[5] + "<br>"); 
}

***这里在输出到 break 行时跳出了 list 代码块区域***

----------------------------------------------------------------
-23> typeof 操作符，检测变量的数据类型。例

typeof "John"              // 返回 string 
typeof 3.14                  // 返回 number
typeof false                 // 返回 boolean
typeof [1,2,3,4]             // 返回 object
typeof {name:'John', age:34} // 返回 object

***在JavaScript中，数组是一种特殊的对象类型。 因此 typeof [1,2,3,4] 返回 object***

***用 typeof 检测 null 返回是 object ***

----------------------------------------------------------------
-24> null ，表示“什么都没有”，但类型还是为对象，例

var person = null;           // 值为 null(空), 但类型为对象

var person = undefined;     // 值为 undefined, 类型为 undefined

----------------------------------------------------------------
-25> undefined ，是一个没有设置值的变量，typeof 一个没有值的变量会返回 undefined。

***
undefined 和 null 的区别：null 和 undefined 的值相等，但类型不等，例

typeof undefined             // undefined
typeof null                  // object
null === undefined           // false
null == undefined            // true
***

----------------------------------------------------------------
-26> constructor 属性，返回所有 JavaScript 变量的构造函数。例

"John".constructor                 // 返回 function String()  { [native code] }
(3.14).constructor                 // 返回 function Number()  { [native code] }
false.constructor                  // 返回 function Boolean() { [native code] }
[1,2,3,4].constructor              // 返回 function Array()   { [native code] }
{name:'John', age:34}.constructor  // 返回 function Object()  { [native code] }
new Date().constructor             // 返回 function Date()    { [native code] }
function () {}.constructor         // 返回 function Function(){ [native code] }

----------------------------------------------------------------
-27> String() ，转换其他对象为字符串。例

String(123)	// 返回 123
String(false)	// 返回 "false"
String(true)	// 返回 "true"
String(new Date())      // 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)

***
Boolean 方法 toString() 也有相同的效果：

(123).toString()	//返回 123
false.toString()	//返回 false
true.toString()	//返回 true

Date() 返回时间的详细字符串，其他关于日期转换字符串的函数：

getDate()		从 Date 对象返回一个月中的某一天 (1 ~ 31)
getDay()		从 Date 对象返回一周中的某一天 (0 ~ 6)
getFullYear()	从 Date 对象以四位数字返回年份
getHours()	返回 Date 对象的小时 (0 ~ 23)
getMilliseconds()	返回 Date 对象的毫秒(0 ~ 999)
getMinutes()	返回 Date 对象的分钟 (0 ~ 59)
getMonth()	从 Date 对象返回月份 (0 ~ 11)
getSeconds()	返回 Date 对象的秒数 (0 ~ 59)
getTime()		返回 1970 年 1 月 1 日至今的毫秒数

***

----------------------------------------------------------------
-28> Number() ，将字符串转换为数字，例

Number("3.14")    // 返回 3.14
Number(" ")       // 返回 0 
Number("")        // 返回 0
Number("99 88")   // 返回 NaN

***NaN是数字类型的特殊值，意在告知当前转换的字符串为非数字类型***

其他关于字符串转为数字的方法：

parseFloat()	解析一个字符串，并返回一个浮点数
parseInt()		解析一个字符串，并返回一个整数

***
一元运算符 + 可以将变量转换为数字

var y = "5";
var x = + y;	// 这里 x 是一个数字

遇到不能转换的变量时，仍然可以是数字，但是值为NaN

var y = "joh";
var x = + y;	// 这里 x 是一个数字，但是值为 NaN

布尔值也能转换为数字，例

Number(false)     // 返回 0
Number(true)      // 返回 1

日期也能转换为数字，例

d = new Date();
Number(d)          // 返回 1548154356172

日期方法 getTime() 也有相同的效果，例

d = new Date();
d.getTime()        // 返回 1548154331194

***

----------------------------------------------------------------
-29> 自动转换类型，当 JavaScript 尝试操作一个 "错误" 的数据类型时，会自动转换为 "正确" 的数据类型，例

5 + null    // 返回 5         null 转换为 0
"5" + null  // 返回"5null"   null 转换为 "null"
"5" + 1     // 返回 "51"      1 转换为 "1"  
"5" - 1     // 返回 4         "5" 转换为 5

***
当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法：

document.getElementById("demo").innerHTML = myVar;

myVar = {name:"Fjohn"}  // toString 转换为 "[object Object]"
myVar = [1,2,3,4]       // toString 转换为 "1,2,3,4"
myVar = new Date()      // toString 转换为 "Fri Jul 18 2014 09:08:55 GMT+0200"
myVar = 123             // toString 转换为 "123"
myVar = true            // toString 转换为 "true"
myVar = false           // toString 转换为 "false"

----------------------------------------------------------------
-30> 正则表达式，使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式，可用于文本搜索和文本替换。语法：/正则表达式主体/修饰符(可选)。

字符串方法，分为用于查找起始位置(从0开始数)的 search() 方法和用于替换的 replace() 方法，例

search() 方法

var str = "Visit Runoob!"; 
var n = str.search(/Runoob/i);	// 输出结果为 6

也可直接使用字符串为参数，字符串参数为转换为正则表达式：

var str = "Visit Runoob!"; 
var m = str.search("Runoob");	// 输出结果为 6


replace() 方法，语法：str.replace(/Runoob/i,"Ru") ，意为字符串把 str 中的 Runoob 部分替换为 Ru

也可使用字符串作为参数，语法：str.replace(“Runoob”,"Ru") 

***
正则表达式修饰符

i	执行对大小写不敏感的匹配
g	执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）
m	执行多行匹配
***
***
正则表达式模式

[abc]	查找方括号之间的任何字符
[0-9]	查找任何从 0 至 9 的数字
(x|y)	查找任何以 | 分隔的选项


元字符是拥有特殊含义的字符

\d	查找数字
\s	查找空白字符
\b	匹配单词边界
\uxxxx	查找以十六进制数 xxxx 规定的 Unicode 字符


量词

n+	匹配任何包含至少一个 n 的字符串
n*	匹配任何包含零个或多个 n 的字符串
n?	匹配任何包含零个或一个 n 的字符串

***

使用 RegExp 对象，在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。包括：

test() ，查找字符串中包含什么，并输出 true 或 false，例，

var patt1=new RegExp("e");
document.write(patt1.test("The best things in life are free"));	// 结果为 true

***
var patt1 = /e/ 的写法与上面结果相同

或者两行并为一行

document.write(/e/.test("The best things in life are free"));
***


exec() ，查找结果，并生成数组用来存放结果，若未找到匹配，返回 null ，例，

document.write(/e/.exec("The best things in life are free!"));	// 结果为 e

----------------------------------------------------------------
-31> 错误，try 语句测试代码块的错误，catch 语句处理错误，throw 语句创建自定义错误，finally 语句在 try 和 catch 语句后，无论是否触发异常，该语句都会执行。

try 和 catch 是成对出现的，语法：

try {
    ...    //异常的抛出
} catch(e) {
    ...    //异常的捕获与处理
} finally {
    ...    //结束处理
}

实例

var txt="";
function daima(){
	try {
		adddlert("Welcome guest!");
	}
	catch(cuo) {
		txt="本页有一个错误。\n\n";
		txt+="错误描述：" + cuo.message + "\n\n";
		txt+="点击确定继续。\n\n";
		alert(txt);
	}
}

*** cuo.message 表示报错的信息，message为属性，不可变***

finally 语句实例

function myFunction() {
  var message, x;
  message = document.getElementById("p01");
  message.innerHTML = "";
  x = document.getElementById("demo").value;
  try { 
    if(x == "") throw "值是空的";
    if(isNaN(x)) throw "值不是一个数字";
    x = Number(x);
    if(x > 10) throw "太大";
    if(x < 5) throw "太小";
  }
  catch(err) {
    message.innerHTML = "错误: " + err + ".";
  }
  finally {
    document.getElementById("demo").value = "";
  }
}


Throw 语句，允许我们创建自定义错误，正确的技术术语是：创建或抛出异常（exception），语法

throw exception

***异常可以是 JavaScript 字符串、数字、逻辑值或对象***
----------------------------------------------------------------
-32> 调试工具 console.log() 方法，在浏览器的 F12 键打开的 console 工具界面打印出消息用以调试。

debugger 关键字，在浏览器的 F12 键打开的 console 工具界面时使用，停止当前行的代码执行。

----------------------------------------------------------------
-33> 严格模式，JS代码块首行添加 "use strict" ，以达到严格模式的启用，报错信息会出现在浏览器的 console 工具界面。

禁止项：

1、不允许使用未声明的变量

2、不允许删除变量或对象

3、不允许删除函数

4、不允许变量重名

5、不允许使用八进制

6、不允许使用转义字符

7、不允许对只读属性赋值

8、不允许对一个使用 getter() 方法读取的属性进行赋值

9、不允许删除一个不允许删除的属性

10、变量名不能使用 “eval” 字符串

11、变量名不能使用 “arguments” 字符串

12、不允许使用 with (Math){x=cos(2)} 这种语句

13、由于一些安全原因，在作用哉 eval() 创建的变量不能被调用

14、禁止 this 关键字指向全局对象

*** "use strict" 指令只允许出现在脚本或函数的开头***

----------------------------------------------------------------
-34> 比较运算符常见错误

1、在常规的比较中，数据类型是被忽略的，10 == “10” 是成立的

2、在严格的比较运算中，=== 为恒等计算符，同时检查表达式的值与类型，10 === “10” 是不成立的

***switch 语句会使用恒等计算符(===)进行比较***

加法与连接的注意事项，例

var x = 10 + 5 ;	// x 的结果为数字 15 ，这就是加法

var x = 10 + "5"；	// x 的结果为字符串 “105” ，这就是连接

***所有的编程语言，包括 JavaScript，对浮点型数据的精确度都很难确定，所以最好使用整数来进行***


字符串分行，需要使用反斜杠 \ ，例

var x = "fuck you";

等同于

var x = "fuck \
you"；

***JavaScript 默认是在代码的最后一行自动结束***

***
JavaScript 不支持使用名字来索引数组，只允许使用数字索引，例

var person = [];
person[0] = "John";
person[1] = "Doe";
person[2] = 46;
var x = person.length;         // person.length 返回 3
var y = person[0];             // person[0] 返回 "John"

在 JavaScript 中, 对象 使用 名字作为索引，如果你使用名字作为索引，当访问数组时，JavaScript 会把数组重新定义为标准对象。执行这样操作后，数组的方法及属性将不能再使用，否则会产生错误，例

var person = [];
person["firstName"] = "John";
person["lastName"] = "Doe";
person["age"] = 46;
var x = person.length;         // person.length 返回 0
var y = person[0];             // person[0] 返回 undefined

***定义数组元素，最后不能添加逗号，浏览器的效果不兼容***

***定义对象，最后不能添加逗号，别问我为什么***

***
undefined 不是 null

在 JavaScript 中, null 用于对象, undefined 用于变量，属性和方法。前者表示它存在，但它是一个空对象；后者表示其是不存在的。

null 不是 “” ，前者是空对象，后者是空字符串。
***

----------------------------------------------------------------
-35> 表单数据经常需要使用 JavaScript 来验证其正确性：

1、验证表单数据是否为空？
2、验证输入是否是一个正确的email地址？
3、验证日期是否输入正确？
4、验证表单输入内容是否为数字型？

***
表单自动验证，如果表单字段 (fname) 的值为空, required 属性会阻止表单提交，并使浏览器自带提示框进行提示不可空值，例

<form action="demo_form.php" method="post">
  <input type="text" name="fname" required="required">
  <input type="submit" value="提交">
</form>

required="required" 添加后，才会让浏览器协助阻止表单提交(未输入值时)，并使用默认提示
***

E-mail 验证，输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号，例

function validateForm(){
  var x=document.forms["myForm"]["email"].value;
  var atpos=x.indexOf("@");
  var dotpos=x.lastIndexOf(".");
  if (atpos<1 || dotpos<atpos+2 || dotpos+2>=x.length){
    alert("不是一个有效的 e-mail 地址");
    return false;
  }
}

----------------------------------------------------------------
-36> 验证 API ，checkValidity() 方法告知 input 元素中的数据是否合法，是返回 true ，否则返回 false 。例，input.checkValidity() == true

约束验证 DOM 属性

validity		布尔属性值，返回 input 输入值是否合法
validationMessage	浏览器错误提示信息
willValidate	指定 input 是否需要验证


Validity 属性

customError	设置为 true, 如果设置了自定义的 validity 信息。
patternMismatch	设置为 true, 如果元素的值不匹配它的模式属性。
rangeOverflow	设置为 true, 如果元素的值大于设置的最大值。
rangeUnderflow	设置为 true, 如果元素的值小于它的最小值。
stepMismatch	设置为 true, 如果元素的值不是按照规定的 step 属性设置。
tooLong		设置为 true, 如果元素的值超过了 maxLength 属性设置的长度。
typeMismatch	设置为 true, 如果元素的值不是预期相匹配的类型。
valueMissing	设置为 true，如果元素 (required 属性) 没有值。
valid		设置为 true，如果元素的值是合法的。

***
rangeOverflow 属性实例

<input id="id1" type="number" max="100">
<button onclick="myFunction()">验证</button>
 
<p id="demo"></p>
 
<script>
function myFunction() {
    var txt = "";
    if (document.getElementById("id1").validity.rangeOverflow) {	// 检测 input 中的值是否大于 max 值，大于时返回 true
       txt = "输入的值太大了";
    }
    document.getElementById("demo").innerHTML = txt;
}
</script>
***

----------------------------------------------------------------
-36> this 关键字，面向对象语言中 this 表示当前对象的一个引用。

***严格模式下函数是没有绑定到 this 上，这时候 this 是 undefined***

事件中的 this

在 HTML 事件句柄中，this 指向了接收事件的 HTML 元素，例

<button onclick="this.style.display='none'">点我后我就消失了</button>


显式函数绑定

在 JavaScript 中函数也是对象，对象则有方法，apply 和 call 就是函数对象的方法。这两个方法异常强大，他们允许切换函数执行的上下文环境（context），即 this 绑定的对象，例

var person1 = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person2 = {
  firstName:"John",
  lastName: "Doe",
}
person1.fullName.call(person2);  // 返回 "John Doe"

----------------------------------------------------------------
-36> 块级作用域(Block Scope)，使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到，例

{ 
    var x = 2; 
}
// 这里可以使用 x 变量

***
let 声明的变量只在 let 命令所在的代码块 {} 内有效，在 {} 之外不能访问，例

{ 
    let x = 2;
}
// 这里不能使用 x 变量

***


HTML 代码中使用全局变量

在 JavaScript 中, 全局作用域是针对 JavaScript 环境。
在 HTML 中, 全局作用域是针对 window 对象。
使用 var 关键字声明的全局作用域变量属于 window 对象。
使用 let 关键字声明的全局作用域变量不属于 window 对象。例

var carName = "Volvo";	// 可以使用 window.carName 访问变量

let carName = "Volvo";	// 不能使用 window.carName 访问变量
***

在相同的作用域或块级作用域中，不能使用 let 关键字来重置 var 关键字或者 let 关键字声明的变量，例

var x = 2;       // 合法
let x = 3;       // 不合法

{
    var x = 4;   // 合法
    let x = 5   // 不合法
}

或者

let x = 2;       // 合法
let x = 3;       // 不合法

{
    let x = 4;   // 合法
    let x = 5;   // 不合法
}

***也不能使用 var 关键字来重置 let 关键字声明的变量***

let 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的，例

let x = 2;       // 合法

{
    let x = 3;   // 合法
}

{
    let x = 4;   // 合法
}


const 关键字，用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改，例

const PI = 3.141592653589793;
PI = 3.14;      // 报错
PI = PI + 10;   // 报错

// 错误写法
const PI;
PI = 3.14159265359;

// 正确写法
const PI = 3.14159265359;
***

const定义常量与使用let 定义的变量相似：

二者都是块级作用域
都不能和它所在作用域内的其他变量或函数拥有相同的名称
两者还有以下两点区别：

const声明的常量必须初始化，而let声明的变量不用
const 定义常量的值不能通过再赋值修改，也不能再次声明。而 let 定义的变量值可以修改。
***

const 的本质: const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变的，例

// 创建常量对象
const car = {type:"Fiat", model:"500", color:"white"};
 
// 修改属性:
car.color = "red";
 
// 添加属性
car.owner = "Johnson";

但是我们不能对常量对象重新赋值，例

const car = {type:"Fiat", model:"500", color:"white"};
car = {type:"Volvo", model:"EX60", color:"red"};    // 错误


// 创建常量数组
const cars = ["Saab", "Volvo", "BMW"];
 
// 修改元素
cars[0] = "Toyota";
 
// 添加元素
cars.push("Audi");

const cars = ["Saab", "Volvo", "BMW"];
cars = ["Toyota", "Volvo", "Audi"];    // 错误

***
1、在相同的作用域或块级作用域中，不能使用 const 关键字来重置 var 和 let关键字声明的变量
2、在相同的作用域或块级作用域中，不能使用 const 关键字来重置 const 关键字声明的变量
3、const 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的
***

----------------------------------------------------------------
-37> JSON相关函数

JSON.parse()	用于将一个 JSON 字符串转换为 JavaScript 对象。

JSON.stringify()	用于将 JavaScript 值转换为 JSON 字符串。

----------------------------------------------------------------
-38> javascript:void(0) 含义，被赋值的对象为不存在的，例

var a = void（a + b）；	// 在这里 a 为 undefined

***
href="#"与href="javascript:void(0)"的区别，# 包含了一个位置信息，默认的锚是#top 也就是网页的上端。而javascript:void(0), 仅仅表示一个死链接。在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。如果你要定义一个死链接请使用 javascript:void(0) 。
***

----------------------------------------------------------------
-39> JavaScript 代码规范，代码规范通常包括以下几个方面:

变量和函数的命名规则
空格，缩进，注释的使用规则。
其他常用规范……
规范的代码可以更易于阅读与维护。

***不推荐使用 TAB 键来缩进，因为不同编辑器 TAB 键的解析不一样***

命名规则，一般很多代码语言的命名规则都是类似的，例如:

1、变量和函数为小驼峰法标识, 即除第一个单词之外，其他单词首字母大写（ lowerCamelCase）
2、全局变量为大写 (UPPERCASE )
3、常量 (如 PI) 为大写 (UPPERCASE )

----------------------------------------------------------------
-40> 函数表达式，可以通过一个表达式定义，函数表达式可以存储在变量中，例

var x = function (a, b) {return a * b};	// 此为一个匿名函数(函数没有名称)
var z = x(4, 3);	// 在函数表达式存储在变量后，由变量 x 来代表函数使用


构造函数，函数同样可以通过内置的 JavaScript 函数构造器（Function()）定义，例

var myFunction = new Function("a", "b", "return a * b");

var x = myFunction(4, 3);

实际上，你不必使用构造函数。上面实例可以写成：

var myFunction = function (a, b) {return a * b}

var x = myFunction(4, 3);

***在 JavaScript 中，很多时候，你需要避免使用 new 关键字***

***
自调用函数，函数表达式可以 "自调用"，自调用表达式会自动调用，如果表达式后面紧跟 () ，则会自动调用，不能自调用声明的函数。

通过添加括号，来说明它是一个函数表达式，实例

<p>函数可以自动调用：</p>
<p id="demo"></p>
<script>
(function () {
    document.getElementById("demo").innerHTML = "Hello! 我是自己调用的";
})();	// 这里表达式后面紧跟了 () ，表示自己调用了自己
</script>
// 以上函数实际上是一个 匿名自我调用的函数 (没有函数名)
***

函数可作为一个值或表达式使用，例

function myFunction(a, b) {
    return a * b;
}
var x = myFunction(4, 3);	// x 的结果为 12

var x = myFunction(4, 3) * 2;	// x 的结果为 24

***
函数是对象，在 JavaScript 中使用 typeof 操作符判断函数类型将返回 "function" ，但是JavaScript 函数描述为一个对象更加准确，JavaScript 函数有 属性 和 方法。

arguments.length 属性返回函数调用过程接收到的参数个数，例

function myFunction(a, b) {
    return arguments.length;	// 返回 2 ，这个函数表达式只有 a 和 b 两个参数
}

toString() 方法将函数作为一个字符串返回，例

function myFunction(a, b) {
    return a * b;
}

var txt = myFunction.toString();	// 返回 function myFunction(a, b) { return a * b; }


箭头函数，箭头函数表达式的语法比普通函数表达式更简洁，语法

(参数1, 参数2, …, 参数N) => { 函数声明 }
(参数1, 参数2, …, 参数N) => 表达式(单一)
// 相当于：(参数1, 参数2, …, 参数N) =>{ return 表达式; }

当只有一个参数时，圆括号是可选的，语法

(单一参数) => {函数声明}
单一参数 => {函数声明}

没有参数的函数应该写成一对圆括号，语法

() => {函数声明}

实例：

// ES5
var x = function(x, y) {
     return x * y;
}
 
// ES6
const x = (x, y) => x * y;

***使用 const 比使用 var 更安全，因为函数表达式始终是一个常量***

如果函数部分只是一个语句，则可以省略 return 关键字和大括号 {}，这样做是一个比较好的习惯，例

const x = (x, y) => { return x * y };

----------------------------------------------------------------
-41> 函数参数，JavaScript 函数对参数的值没有进行任何的检查。

默认参数，ES5 中如果函数在调用时未提供隐式参数，参数会默认设置为： undefined ，有时这是可以接受的，但是建议最好为参数设置一个默认值，例

<p>设置参数的默认值。</p>
<p id="demo"></p>
<script>
function myFunction(x, y) {
    if (y === undefined) {
        y = 0;
    }    
    return x * y;
}
document.getElementById("demo").innerHTML = myFunction(4);
</script>

这里，函数可以有更简单的写法：

function myFunction(x, y) {
    y = y || 0;	// 如果y已经定义 ， y || 返回 y, 因为 y 是 true, 否则返回 0, 因为 undefined 为 false
}

*** return 作为终止行，后面不再向下执行***

ES6 函数可以自带参数，ES6 支持函数带有默认参数，就判断 undefined 和 || 的操作，例

function myFunction(x, y = 10) {
    // y is 10 if not passed or undefined
    return x + y;
}
 
myFunction(0, 2) // 输出 2
myFunction(5); // 输出 15, y 参数的默认值


arguments 对象，包含了函数调用的参数数组，通过这种方式你可以很方便的找到最大的一个参数的值，例

x = findMax(1, 123, 500, 115, 44, 88);
 
function findMax() {
    var i, max = arguments[0];
    
    if(arguments.length < 2) return max;		// 判断是否需要进行下一步，作用是优化代码，节省 CPU 性能
 
    for (i = 0; i < arguments.length; i++) {
        if (arguments[i] > max) {
            max = arguments[i];
        }
    }
    return max;
}

----------------------------------------------------------------
-42> 函数调用，JavaScript 函数有 4 种调用方式，每种方式的不同在于 this 的初始化

***注意 this 是保留关键字，你不能修改 this 的值***

调用 JavaScript 函数，函数中的代码在函数被调用后执行，例

function myFunction(a, b) {
    return a * b;
}
myFunction(10, 2);  

以上函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象。
在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。
在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。
myFunction() 和 window.myFunction() 是一样的，所以上面例子也可以写为

function myFunction(a, b) {
    return a * b;
}
window.myFunction(10, 2);    // window.myFunction(10, 2) 返回 20


函数作为方法调用时，this 表示所有者，意思就是函数作为对象方法调用，会使得 this 的值成为对象本身，例

var myObject = {
    firstName:"John",
    lastName: "Doe",
    fullName: function () {
        return this;
    }
}
myObject.fullName();   	// 返回 [object Object] (所有者对象)


作为函数方法调用函数，call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身，例

function myFunction(a, b) {
    return a * b;
}
myObject = myFunction.call(myObject, 10, 2);     // 返回 20 ，call() 方法把除第一位的参数(是指当前对象)的后面的参数带入到 myFunction() 函数中使用，且此处等同于 myObject = myFunction.call(this, 10, 2)

myArray = [10, 2];
myObject = myFunction.apply(myObject, myArray);  // 返回 20，apply() 方法的第一位参数是当前对象，第二位参数是个数组，其中的值给予 myFunction() 函数使用，且此处等同于 myObject = myFunction.apply(this, myArray)

***通过 call() 或 apply() 方法你可以设置 this 的值, 且作为已存在对象的新方法调用***

----------------------------------------------------------------
-43> 闭包，是指可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭，例

var add = (function () {
    var counter = 0;
    return function () {return counter += 1;}
})();
 
add();
add();
add();
 
// 计数器 counter 为 3

实例解析：
变量 add 指定了函数自我调用的返回字值。

***自我调用函数只执行一次。设置计数器为 0。并返回函数表达式***

add 变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。
这个叫作 JavaScript 闭包。它使得函数拥有私有变量变成可能。
计数器受匿名函数的作用域保护，只能通过 add 方法修改。

----------------------------------------------------------------
-44> 所有事物都是对象，JavaScript 提供多个内建对象，比如 String、Date、Array 等等， 对象只是带有属性和方法的特殊数据类型，对象拥有属性和方法。

访问对象的属性，语法

objectName.propertyName

实例

var message="Hello World!";
var x=message.length;	// x 的值为 12
var y=message.toUpperCase();	// y 的值为 HELLO WORLD! ，toUpperCase() 方法的作用是转换 String 对象为大写


创建对象，以下例子创建了对象的一个新实例，并向其添加了四个属性：

person=new Object();
person.firstname="John";
person.lastname="Doe";
person.age=50;
person.eyecolor="blue";

或可以写成如下格式：

person={firstname:"John",lastname:"Doe",age:50,eyecolor:"blue"};

使用对象构造器，可以使用函数来构造对象，例

function person(firstname,lastname,age,eyecolor)
{
    this.firstname=firstname;
    this.lastname=lastname;
    this.age=age;
    this.eyecolor=eyecolor;
}

***
创建 JavaScript 对象实例，一旦您有了对象构造器，就可以创建新的对象实例，就像这样：

var myFather=new person("John","Doe",50,"blue");

var myMother=new person("Sally","Rally",48,"green");
***

***JavaScript 是面向对象的语言，但 JavaScript 不使用类***
***在 JavaScript 中，不会创建类，也不会通过类来创建对象（就像在其他面向对象的语言中那样）***
***JavaScript 基于 prototype，而不是基于类的***


for...in 循环，循环遍历对象的属性，语法

for (variable in object)
{
    执行的代码……
}

***for...in 循环中的代码块将针对每个属性执行一次***

var person={fname:"John",lname:"Doe",age:25}; 
 
for (x in person)
{
    txt=txt + person[x];
}

----------------------------------------------------------------
-45> Number 对象，JavaScript 只有一种数字类型，可以使用也可以不使用小数点来书写数字，极大或极小的数字可通过科学（指数）计数法来写，例

var y=123e5;    // 12300000
var z=123e-5;   // 0.00123

***所有 JavaScript 数字均为 64 位***
***整数（不使用小数点或指数计数法）最多为 15 位***
***小数的最大位数是 17，但是浮点运算并不总是 100% 准确***

***
如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 "x"，则解释为十六进制数，例

var y = 0377; 	// 八进制数，结果是 255
var z = 0xFF;	// 十六进制数，结果是 255

所以，绝不要在数字前面写零，除非您需要进行八进制转换。

通过 toString() 方法可以输出 16进制、8进制、2进制，例

var myNumber=128;
myNumber.toString(16);   // 返回 80
myNumber.toString(8);    // 返回 200
myNumber.toString(2);    // 返回 10000000
***

无穷大（Infinity），当数字运算结果超过了JavaScript所能表示的数字上限（溢出），结果为一个特殊的无穷大（infinity）值。负无穷大时，在JavaScript中以 -Infinity 表示。无穷大值的行为特性和我们所期望的是一致的：基于它们的加、减、乘和除运算结果还是无穷大（当然还保留它们的正负号），例

myNumber=2;
while (myNumber!=Infinity)	// myNumber 不为无穷大时继续循环
{
    myNumber=myNumber*myNumber; // 重复计算直到 myNumber 等于 Infinity
}

***除以0也产生了无限***

NaN - 非数字值，是一个数字类型，可以把 Number 对象设置为该值，来指示其不是数字值，你可以使用 isNaN() 全局函数来判断一个值是否是 NaN 值，例

var x = 1000 / "Apple";
isNaN(x); // 返回 true
var y = 100 / "1000";
isNaN(y); // 返回 false

var x = 1000 / 0;
isNaN(x); // 返回 false	// 除以0是无穷大，无穷大是一个数字

***

数字可以是数字或者对象，数字可以私有数据进行初始化，就像 x = 123 ，JavaScript 数字对象初始化数据， var y = new Number(123) ，例

var x = 123;
var y = new Number(123);
typeof(x) // 返回 Number
typeof(y) // 返回 Object

----------------------------------------------------------------
-46> 字符串（String）对象，用于处理已有的字符块，你可以在字符串中使用转义字符(\)使用引号，例

var answer='It\'s alright';	// 字符串内容是 It's alright
var answer="He is called \"Johnny\"";	// 字符串内容是 He is called "Johnny"
var answer='He is called "Johnny"';	// 字符串内容是 He is called "Johnny"

字符串（String）使用长度属性length来计算字符串的长度，例

var txt="Hello World!";
document.write(txt.length);	// 结果为 12 ，空格也算一个长度

var txt="ABCDEFGHIJKLMNOPQRSTUVWXYZ";
document.write(txt.length);	// 结果为 26


在字符串中查找字符串，使用 indexOf() 来定位字符串中某一个指定的字符首次出现的位置，例

<p id="p1">Click the button to locate where "locate" first occurs.</p>
<p id="p2">0</p>
<button onclick="myFunction()">点我</button>
<script>
function myFunction(){
	var str=document.getElementById("p1").innerHTML;
	var n=str.indexOf("locate");	// 这里查找的是 locate 的位置，不是 “locate”
	document.getElementById("p2").innerHTML=n+1;
}
</script>

***如果没找到对应的字符函数返回 -1 ***
***lastIndexOf() 方法在字符串末尾开始查找字符串出现的位置***


match()函数用来查找字符串中特定的字符，并且如果找到的话，则返回这个字符，例

var str="Hello world!";
document.write(str.match("world") + "<br>");	// 返回 world
document.write(str.match("World") + "<br>");	// 返回 null
document.write(str.match("world!"));		// 返回 world!


replace() 方法在字符串中用某些字符替换另一些字符，例

str="Please visit Microsoft!"
var n=str.replace("Microsoft","Runoob");


字符串大小写转换使用函数 toUpperCase() / toLowerCase() ，例

var txt="Hello World!";       // String
var txt1=txt.toUpperCase();   // txt1 文本会转换为大写
var txt2=txt.toLowerCase();   // txt2 文本会转换为小写


字符串使用split()函数转为数组，例

txt="a,b,c,d,e"   // String
txt.split(",");   // 使用逗号分隔

txt="a b c d e"   // String
txt.split(" ");   // 使用空格分隔

txt="a|b|c|d|e"   // String
txt.split("|");   // 使用竖线分隔 


特殊字符，Javascript 中可以使用反斜线（\）插入特殊符号，如：撇号,引号等其他特殊符号，可以使用的反斜线转义特殊字符：

代码	输出
\'	单引号
\"	双引号
\\	斜杆
\n	换行
\r	回车
\t	tab
\b	空格
\f	换页

字符串属性和方法
属性:

length
prototype
constructor


方法:

charAt()
charCodeAt()
concat()
fromCharCode()
indexOf()
lastIndexOf()
match()
replace()
search()
slice()
split()
substr()
substring()
toLowerCase()
toUpperCase()
valueOf()

----------------------------------------------------------------
-47> Date（日期） 对象，用于处理日期和时间，其拥有的方法：

getFullYear()
使用 getFullYear() 获取年份。

getTime()
getTime() 返回从 1970 年 1 月 1 日至今的毫秒数。

setFullYear()
如何使用 setFullYear() 设置具体的日期。

toUTCString()
如何使用 toUTCString() 将当日的日期（根据 UTC）转换为字符串。

getDay()
如何使用 getDay() 和数组来显示星期，而不仅仅是数字。

Display a clock
如何在网页上显示一个钟表。

***JavaScript Date 对象参考手册 http://www.runoob.com/js/jsref-obj-date.html ***


创建日期，Date 对象用于处理日期和时间，可以通过 new 关键词来定义 Date 对象，有四种方式初始化日期：

new Date() // 当前日期和时间
new Date(milliseconds) //返回从 1970 年 1 月 1 日至今的毫秒数
new Date(dateString)
new Date(year, month, day, hours, minutes, seconds, milliseconds)

***上面的参数大多数都是可选的，在不指定的情况下，默认参数是 0 ***


设置日期，通过使用针对日期对象的方法，我们可以很容易地对日期进行操作，例

var myDate=new Date();
myDate.setFullYear(2010,0,14);	// setFullYear() 方法


两个日期比较，日期对象也可用于比较两个日期，例

var x=new Date();		// x 获取当前日期
x.setFullYear(2100,0,14);	// 改变当前日期为 2100 年 1 月 14 日
var today = new Date();	// today 获取当前日期

if (x>today)
{
    alert("今天是2100年1月14日之前");
}
else
{
    alert("今天是2100年1月14日之后");
}

----------------------------------------------------------------
-48> Array（数组） 对象，数组对象的作用是：使用单独的变量名来存储一系列的值。

***完整的数组对象参考手册 http://www.runoob.com/js/jsref-obj-array.html ***

----------------------------------------------------------------
-49> Boolean（布尔） 对象，用于将非布尔值转换为布尔值（true 或者 false），语法

var myBoolean=new Boolean();

***
0
-0
null
""
false
undefined
NaN
那么对象的值为 false。否则，其值为 true（即使当变量值为字符串 "false" 时）！
***

----------------------------------------------------------------
-50> Math（算数）对象，作用是：执行普通的算数任务，Math 对象提供多种算数值类型和函数，无需在使用这个对象之前对它进行定义，语法：

var x=Math.PI;
var y=Math.sqrt(16);

*** Math对象无需在使用这个对象之前对它进行定义***

***完整的 Math 对象参考手册 http://www.runoob.com/jsref/jsref-obj-math.html ***

----------------------------------------------------------------
-51> RegExp 对象，语法

var patt=new RegExp(pattern,modifiers);

或者

var patt=/pattern/modifiers;

模式描述了一个表达式模型，修饰符(modifiers)描述了检索是否是全局，区分大小写等，例

var re = new RegExp("\\w+");
var re = /\w+/;

***RegExp：是正则表达式（regular expression）的简写***

***JavaScript RegExp 对象的参考手册 http://www.runoob.com/jsref/jsref-obj-regexp.html***


RegExp 修饰符，修饰符用于执行不区分大小写和全文的搜索。

i - 修饰符是用来执行不区分大小写的匹配

g - 修饰符是用于执行全文的搜索（而不是在找到第一个就停止查找,而是找到所有的匹配）

----------------------------------------------------------------

----------------------------------------------------------------

----------------------------------------------------------------
-1> 对象属性的删除，使用 delete ，例

var abc = new Object(); // 此时 abc 为空对象 {}

// 给 abc 添加属性 name:'a'
abc.name = 'a'; // 此时 abc 为 {name: "a"} ，或 abc['name'] = 'a' 也是可行的
abc.ba = 'b'; // 此时 abc 为 {name: "a"; ba:"b"}

// 删除 abc 的属性 name:'a'
delete abc.name; // 此时 abc 为空对象 {ba:"b"}

----------------------------------------------------------------
-2> 对象方法的调用，有两种：

var abc = new Object();
abc.ddd = function(){ alert('123');} // 这里建立了一个函数 ddd 并给它赋予了一个方法

//调用 ddd()
abc.ddd();
或 abc['ddd'](); // 方法调用需要添加括号 ()

***调用字符串变量时，只能使用 [] 的方式进行，例 var d = 'ddd' ，调用 ddd() 可写为 abc[d]() ***

----------------------------------------------------------------
-3> 数组的修改，使用 splice() 方法，例

var su = ["Banana", "Orange", "Apple", "Mango"];

// 现在要去掉第二个位置的 "Orange" 和第三个位置的 "Apple" ，并且添加 "第二" "第三" 到第二和第三的位置
su.splice(1,2,"第二","第三"); // 第一个数字 1 表示位置，第二个数字 2 表示删除第二个和第三个位置的元素，其后的是要添加进去的元素

----------------------------------------------------------------
-4> 数组的遍历，有三种循环方法：

var arr = [1,2,3,4,5,6,7]

for 循环，例

for(var i = 0; i < arr.length; i++){
	console.log(i);
	console.log(arr[i]);
};

forEach 循环，例

arr.forEach(function(a,b){ // 此处的括号内第一个参数 a 表示数组的元素，第二个参数 b 表示元素的位置
	console.log(a);
	console.log(b);
});

for in 循环，例

for (var i in arr){
	console.log(arr[i]);
}

----------------------------------------------------------------
-5> 数组的排序，使用 sort() 方法，但这种排序并非自然数排序，而要达到自然数排序，可如此操作

var arr = [1,2,9,3,3,4,6,0,20,39];

var res = arr.sort(function(a,b){
	if(a > b) return 1;
	else if(a == b) return 0;
	else return 1;
});

----------------------------------------------------------------
-5> 正式表达式规则是从前到后检测，其转义字符有

\w 单个的字母数字下划线

\W 单个的非字母数字下划线

\d 单个的数字

\D 单个的非数字

\s 单个的空白字符

\S 单个的非空白字符

----------------------------------------------------------------
-6> 正式表达式规则是从前到后检测，其元字符有

. 除换行符之外的任意单个字符

* 限定匹配次数 0~n 次，不单独使用，满足匹配的情况下会尽可能的多的内容，例 .* 表示匹配非换行符的结果，无结果时返回空字符串，因为 0 次匹配也算匹配成功

+ 限定匹配次数 1~n 次，不单独作用，满足匹配的情况下会尽可能的多的内容，例 .+ 表示匹配非换行符的结果，无结果时返回 null

{} 限定匹配大括号内的次数，不单独作用，例 \w{4,10} 表示匹配单个的非字母数字下划线的连续的4个到10个的字符，此处只有单个数字4时，只取4个字符，第二个数字10表示取值的最大范围

[] 限定匹配中括号内的某一个元素，例 [abc] 表示匹配到 a b c 三个字母其中一个即可，此处 \w 可用 [a-zA-Z_] 表示

| 表示 或 的效果，例 abc|ded|asd 表示满足 | 的任意一组字符结果即可

() 表示子组，提取数据时较为方便，例 \w(\d+) 表示结果时会把 \d+ 的结果也在后面单独呈现，如 ”a233“, "233"

^ 表示必须以指定字符开头，例 ^a 表示必须以 a 开头

$ 表示必须以指定字符结尾，例 a$ 表示必须以 a 结尾


***检测用户输入值时，一般不能省^ $ ，例如 匹配6~20字母数字下划线 的用户名的写法 /^\w{6,20}$/ ***

----------------------------------------------------------------
-7> 正式表达式规则是从前到后检测，其模式修正符

i 表示只匹配一次，例 /a/i 匹配字符串 "a" 只取第一个符合条件的结果

g 表示全局匹配，例 /a/g 匹配字符串 “a" 全部的结果，且结果需多次取出

----------------------------------------------------------------
-8> 时间对象，月份索引是从 0 开始的，其他的都是 1 ，例

var t = new Date(2011,10,1,2,3,4); // 此时出来的月份并不是这里的 10 月份，而是从 0 开始数的，所以此时是 10+1=11 月份，其他的数字是按这里的实际数字来的，结果是 

Tue Nov 01 2011 02:03:04 GMT+0800 (中国标准时间)

----------------------------------------------------------------
-9> 获取某个区间的随机数，例

// 获取从0到1的小数
var res = Math.random(); // (0,1)

// 获取从0到10的随机小数
var res = Math.random()*10; // (0,10)

// 获取从1到10的随机整数
var res = Math.ceil(Math.random()*10); // [1,10]

// 获取从5到14的随机整数
var res = Math.ceil(Math.random()*10) +4;

// 获取从m到n的随机整数
var res = Math.ceil(Math.random()*(n-m+1))+m-1;

***
// 封装随机求整数的函数
function rand(m,n){
	return Math.ceil(Math.random()*(n-m+1))+m-1;
}

// 调用
var res = rand(10,20);

console.log(res); // 获取10到20的随机整数
***

中奖概率问题，比如概率为 m ，例

function rand(m,n){
	return Math.ceil(Math.random()*(n-m+1))+m-1;
}

var res = rand(1,100); // 随机抽取1-100个整数

if (res <= m*100) {	// 此时确定100个数中中奖的数字范围
	alert('恭喜，中奖了！')
}else{
	alert('不好意思，没中奖。')
}

----------------------------------------------------------------
-10> setInterval() 方法可按照指定的周期（以毫秒计）来调用函数或计算表达式，例

function abc(){ };
setInterval(abc,1000); // 表示每1000毫秒调用前面的 abc 函数一次

----------------------------------------------------------------
-11> 声明函数时，形参不要赋予初始值，例

function abc(x,y){ // 此时括号内的 x y 不宜赋值，有的浏览器不兼容
	console(x + y); // 此处可用 console.log(arguments) 获取实参列表
};
abc(1); // 此时未给 y 值，结果会返回 NaN （任何有NaN参与的数值运算都会返回 NaN）

----------------------------------------------------------------
-12> 返回值 return ，可以返回任意类型的值，例

function r() {
	return true; // 此时此函数返回值为 true
}

var res = r(); // 此时 res 调用了函数 r() ，因此获得其运行结果的返回值 true

console.log(res); // 结果为 true

----------------------------------------------------------------
-13> JS在获取网页页面标签的内嵌css时，多拼词（带有 - 的连接词）用后续单词首字母大写的方式进行转换，例

var one = document.getElementById('one');

one.style.border = 'solid 2px #f00'; // 表示给id为 one 的标签添加边框线

one.style.border-radius = '20px'; // 表示添加圆角效果，并且此写法会报错
one.style.borderRadius = '20px'; // 上面圆角效果的正确写法

----------------------------------------------------------------
-13> 获取网页页面标签的属性方法 setAttribute() ，使用方法

//例如现在有一个 <div id="one" title="" name=""></div>

var one = document.getElementById('one');

one.setAttribute('title','abc'); // 改变标签的 title 属性的内容为 abc
one.setAttribute('name','xiaobai'); // 改变标签的 name 属性的内容为 xiaobai

----------------------------------------------------------------
-14> 事件绑定标签的三种方式，例

<div id="test" onclick="alert('第一种绑定方法')"></div> // 直接在标签里添加

<script>
 var test = document.getElementById('test');

test.onclick = function(){ // 无法绑定多个相同事件，因为赋值只有一个值
	alert('第二种绑定方法');
}

test.addEventListener(‘click’, function(){ // 可绑定多个相同事件
	alert('第三种绑定方法');
});
</script>

----------------------------------------------------------------
-15> 文档事件 onload ，当页面元素全部加载完成后执行，在模板引擎中较多使用，例

window.onload = function(){
	alert('文档已加载完成。');
};


文档事件 onbeforeunload ，当页面要被关闭时出来弹窗，例

window.onbeforeunload = function(){
	return '你确定要离开此页面吗？';
};

----------------------------------------------------------------
-16> 鼠标的事件

onclick		单击事件

ondblclick	双击事件

oncontextmenu	右键事件（右键菜单）

onmouseover	移入事件

onmouseout	移出事件

onmousedown	按下事件

onmouseup	弹起事件

onmousemove	移动事件

----------------------------------------------------------------
-17> 键盘事件

onkeydown	按下事件

onkeypress	按下事件（部分功能键不支持）

onkeyup		弹起事件

----------------------------------------------------------------
-18> 表单事件

onfocus		元素获得焦点事件

onblur		元素丧失焦点事件

onchange	元素的值改变时触发事件

onsubmit		表单提交事件

----------------------------------------------------------------
-19> stopPropagation() 方法阻止事件冒泡行为，效果是阻止在点击内层标签触发事件时不触发外层标签的事件，默认是点击内层时会触发外层标签的事件，例

// 现在有三个div标签 <div><div><div></div></div></div>

var divs = document.getElementsByTagName('div'); // 获取外、中、内的三个div

for(var i=0; i<divs.length; i++) { // 分别给三个div绑定点击事件
	divs[i].onclick = function(e) {
		this.style.background = 'black'; // 修改背景为黑色
		e.stopPropagation(); // 阻止冒泡，也就是点击内div时不会再触发中、外层div的点击事件，且此处 e 参数不限制，与前面点击事件括号中的参数一致即可
	}
}

----------------------------------------------------------------
-20> preventDefault() 方法阻止事件默认行为，阻止事件自带的行为，比如点击链接会跳转到新页面，右键会出现右键菜单等，例

// 现在有一个a标签 <a id="test" href="http://www.baidu.com/">百度</a>

var test = document.getElementById('test');

test.onclick = function(e){
	alert('你点击了我。');
	e.preventDefault(); // 阻止默认行为
}

----------------------------------------------------------------
-21> bom对象，即浏览器对象模型，也就是 window 对象。

document

location		指向的是页面的url，可通过它获取url的详细信息，如 location.href 属性记录当前页面的完整url

history		浏览历史，主要实现页面的前进和后退
  back()		加载浏览历史列表中的上一个URL
  forward()	加载浏览历史列表中的下一个URL
  go()		加载浏览历史列表中的某个URL，通过给括号中赋值 -1 时能到上一个，赋值 1 时能到下一个

navigator		客户端信息
  cookieEnabled	是否开启 cookie
  onLine		是否联网
  userAgent	客户端代理标识，得知浏览器类型

screen		当前屏幕信息
  screen.with		获取当前屏幕宽度
  screen.height		获取当前屏幕高度
  screen.availWidth		获取当前浏览器可用宽度
  screen.availHeight	获取当前浏览器可用高度
***常用尺寸获取
  document.documentElement.clientWidth	获取可视区域宽度
  document.documentElement.clientHeight	获取可视区域高度
  document.documentElement.scrollWidth	获取整个文档的宽度
  document.documentElement.scrollHeight	获取整个文档的高度
  document.documentElement.scrollLeft	获取窗口滚动宽度
  document.documentElement.scrollTop	获取窗口滚动高度

frames		子窗口，实现内层窗口和外层窗口的数据交换，前提是满足窗口的 协议、域名、端口必须保持一致
  window.framnes	获取所有子窗口

----------------------------------------------------------------
-22> dom对象，获取元素

普通获取元素

document.getElementById('test'); // 通过标签的 id=“test” 获取，结果是单数

document.getElementsByTagName('div'); // 通过标签的名称 div 获取，结果是数组

document.getElementsByClassName('abc'); // 通过标签的 class="abc" 获取，结果是数组

document.getElementsByName('aaa'); // 通过标签的 name="aaa" 获取，结果是数组，多用于表单


父子关系获取元素，现在有一段html代码

<ul id="images">
 <li><img src=""></li>
 <li><img src=""></li>
 <li><img src=""></li>
 <li><img src=""></li>
 <li><img src=""></li>
 <li><img src=""></li>
</ul>

要获取父元素 ul 中的子元素 li 时

var images = document.getElementById('images');

// 获取所有子元素
var cs = images.childNodes; // 此时 li 标签对之间的 换行符和空白 也被获取为子元素之一
var cs2 = images.children; // 此时只获取 li 标签

// 获取特定的 li 元素，如第 3 个 li
var li = cs2[2];

// 获取第一个子元素
var first = images.firstChild; // 此时获取的第一个元素是 ul 与 第一个 li 之间的 换行符和空白
var f = images.firstElementChild; // 此时获取的是 第一个 li

// 获取最后一个子元素
var last = images.lastChild; // 此时获取的最后一个元素是最后一个 li 与 /ul 之间的 换行符和空白
var l = images.lastElementChild; // 此时获取的是 最后一个 li

// 获取某个同辈元素的上一个元素
var five = images.children[4]; // 获取第五个 li
var prev = five.previousSibling; // 此时获取到的同辈元素是第五个 li 前的 换行符和空白
var p = five.previousElementSibling; // 此时获取到的同辈元素是 第四个 li

// 获取某个同辈元素的下一个元素
var five = images.children[4]; // 获取第五个 li
var next = five.nextSibling; // 此时获取到的同辈元素是第五个 li 后的 换行符和空白
var n = five.nextElementSibling; // 此时获取到的同辈元素是 第六个 li

// 获取父级元素
var five = images.children[4]; // 获取第五个 li
var par = five.parentNode; // 此时获取的是 li 的父级元素 ul


快速获取元素

// 获取 html 标签
var html = document.documentElement;

// 获取 head 标签
var head = document.head;

// 获取 body 标签
var body = document.body;

// 获取页面标签
var title = document.title;

***
标题闪烁效果

var title_a = '[   ]今天天气真好'; // 方括号中使用全角空格
var title_b = '[新提醒]今天天气真好';
var i = 0;

setInterval(function(){
	if (i % 2 == 0) { // 此处取余，i 除以 2 后的余数是否为 0
		document.title = title_a;
	}else{
		document.title = title_b;
	}
	i++;
},500);

----------------------------------------------------------------
-23> dom对象，元素操作

// 现有 <div id="test" name="test">我是123</div>

元素属性的操作

var test = document.getElementById('test');

// 属性添加，现要给 div 添加一个属性并赋值 title=”标题“
test.setAttribute('title','标题'); // 此时 <div id="test" name="test" title=”标题“></div>

// 属性移除，现要移除 div 的 name 属性
test.removeAttribute('name'); // 此时 <div id="test" title=”标题“></div>

// 属性获取
var id = test.getAttribute('id'); // id 的值为 test


元素样式的操作

var css = getComputedStyle(test); // 获取 div 的全部 css 样子，以对象的形式

var width = css.width; // 获取此 div 的宽度属性

var bg = css.backgroundColor; // 驼峰写法，且此处得点明具体属性，只写 background 返回空

元素样式的设置

// 通过 style ，直接添加内嵌样子
test.style.width = '200px';

// 通过 class ，添加另一个 class
test.setAttribute('class','active');
test.className = 'active';


元素内容文本的操作

// 获取 div 内的文本内容
var html = test.innerHTML; // 获取 div 内的所有内容 我是123 ，包括子标签(如果有)
var text = test.textContent; // 只能获取文本内容 我是123

// 修改 div 内的文本内容
test.innerHTML = "<b>我不是123了</b>"; // 会解析 <b></b> 标签，显示加粗了的文本内容 我不是123了
test.textContent = "<b>我不是123了</b>"; // 不会解析 <b></b> 标签，直接显示 <b>我不是123了</b>

----------------------------------------------------------------
-24> dom节点操作

// 现有 <ul id="content"></ul>
var content = document.getElementById('content');

// 创建新元素
var ddiv = document.createElement('div'); // 创建新元素 div

***若要绑定事件，在元素创建时绑定事件是最高效的***

// 插入 div 到 ul 中
content.appendChild(ddiv); // 新插入的 div 是无样式的默认状态，可用 ddiv.className = "div" 赋予样式，这里取其样式名为 .div

// 在此 div 前插入 p
var pp = document.createElement('p'); // 创建新元素 p
content.insertBefore(ddiv, pp); // 把 p 插入到 div 前

// 删除元素
var first = content.firstElementChild; // 获取父级元素 ul 下的第一个子元素
content.removeChild(first);

***
confirm() 确认框，例

var res = confirm('您确定删除该商品吗？'); // 会弹出小窗口并出来 确定 和 取消 按钮，点击后可返回 res 的值为 true 或 false
if(res){
	alert(商品已删除了); // 此处为 true 结果时的操作
}
***

// 替换元素
var last = content.lastElementChild; // 获取最后一个子元素
content.replaceChild(last,first); // 此时最后一个子元素转移到了第一个子元素的位置，第一个子元素消失

// 克隆元素
var new = first.cloneNode(true); // 此时克隆了一个和第一个元素一样的元素，括号内参数 true 的作用是保证克隆元素时也同时克隆被克隆元素的内部内容
content.appendChild(new); // 此时把新的元素 new 添加到了 ul 的尾部

----------------------------------------------------------------
-25> 表单元素值的操作

// 文本框
var text = document.getElementById('user').value; // user 为文本框的 id ，value 为文本框内的值

// 单选框
var sex = document.getElementsByName('sex'); // sex 为单选框的 name 值
var res = '';
for (var i = 0; i<sex.length; i++){
	// 检测是否被选中，属性中是否包含 checked = "checked"
	if(sex[i].getAttribute('checked') == 'checked'){
		res = sex[i].value;
		break; // 跳出循环
	}
}
或者用更简单的判断方式，例
if(sex[i].checked){ // 此处判断 checked 属性是否存在，为真则继续执行代码
	res = sex[i].value;
}
// 人为设置单选框为被选中状态
sex[2].checked = true;

// 多选框
var hobbys = document.getElementsByName('hobbys'); // hobbys 为多选框的 name 值
var arr = []; // 此处新建数组以存储多选框的值
for (var i = 0; i<hobbys.length; i++){
	// 检测是否被选中，属性中是否包含 checked = "checked"
	if(hobbys[i].checked){
		arr.push(hobbys[i].value); // 把多选框的值全部循环一遍，并把被选中的加入到数组中
	}
}

// 下拉框
var se = document.getElementById('diqu'); // 获取下拉框
var v = se.value; // 获取到了下拉框的值
var html = ''; // 用来存储下拉框的被选中的元素的文本
var ops = se.children;
for(var i = 0; i<ops.length; i++) {
	if(ops{i].selected){ // 判断下拉框的 selected 属性是否为真(是否存在)
		html = ops[i].innerHTML; // 获取到了被选中元素的文本
	}
	break;
}
// 人为设置下拉框的选中值
se.value = 1; // 此处 1 为被选中的下拉框的 value 值

// 文本域
var tt = document.getElementById('text'); // 此处 text 为文本域的 id
var ttt = tt.value; // 获取文本域的内容

// 按钮
var bt = document.getElementById('btn'); // 此处 btn 为按钮的 id
bt.disabled = true; // 使按钮处于不可点击状态，disabled 为按钮的属性，表示按钮是否处于不可点击状态

----------------------------------------------------------------
-26> 模拟相对定位效果

// 现有 <div id="ad"></div>
var ad = document.getElementById('ad');
var st = ad.offsetTop; // 获取元素初始化状态时距离文档顶部的距离
window.onscroll = function(){
	var sst = document.documentElement.scrollTop; // 获取滚动过距离
	var new = st + sst;
	ad.style.top = new +'px';
}

----------------------------------------------------------------
-27> 延时按钮效果

<button disabled>下一步</button>
<script>
var btn = document.getElementsByTagName('button')[0];
var t = 5;
var inte = null;
inte = setInterval(function(){
	btn.innerHTML = '下一步 (' + t + ')';
	t --;
	if( t == -1){
		btn.innerHTML = '下一步';
		clearInterval(inte);
		btn.disabled = false;
	}
},1000);
</script>

----------------------------------------------------------------
-28> 全选和反选

爱好：<a href="#">全选</a>丨<a href="#">全选</a>
<hr>
蓝球：<input type="checkbox" name="hobby[]"><br>
足球：<input type="checkbox" name="hobby[]"><br>
排球：<input type="checkbox" name="hobby[]"><br>
冰球：<input type="checkbox" name="hobby[]"><br>

<script>
var a = document.getElementsByTagName('a');
var inputs = document.getElementsByName('hobby[]'); // 此处 name 的值后需加一个 []

// 全选效果
a[0].onclick = function(e){
	e.preventDefault(); // 取消 a 的默认点击跳转行为
	for(var i=0; i<inputs.length; i++){
		inputs[i].checked = true;
	};
}																		

//反选效果
a[1].onclick = function(e){
	e.preventDefault(); // 取消 a 的默认点击跳转行为
	for(var i=0; i<inputs.length; i++){
		inputs[i].checked = !inputs[i].checked;
	};
}

</script>

----------------------------------------------------------------
-29> xml扩展标记语言，主要就是为了传输和存储数据，其特点有

标签可自定义

必须有根标签(最外面有一个外框)

标签必须要有闭合标签(标签须成对出现)

大小写敏感

必须正确的嵌套

属性必须要加引号


----------------------------------------------------------------
-30> ajax，是异步的javascript和html技术

使用ajax发送get请求

// 1.创建ajax请求对象
var x = new XMLHttpRequest();
// 2.绑定事件，用以处理服务器返回的数据
x.onreadystatechange = function(){
	if(x.readyState == 4 && x.status == 200){
		tt.innerHTML = x.responseText;
	}
}
// 3.初始化
x.open('GET', 'server.php', true);
// 4.发送
x.send();

***
进行ajax发送get请求进行到第 2 步绑定事件时，需要注意：

readyState 是一个成员属性，用来表示对象的状态，其状态有5种 0，1，2，3，4，分别表示
0	请求未初始化(这一步在创建ajax请求对象时完成)
1	建立了链接
2	服务器接收了请求
3	服务器正在处理中
4	处理完毕，数据已经返回给客户端

status 是一个成员属性，用来表示服务器的响应状态，分别有
200	完成响应
404	not found(未找到)
403	forbidden(禁止)

responseText 是一个成员属性，用来存储服务器返回的数据
***


使用ajax发送post请求

//前面 1，2 步相同，直接进行第 3 步
x.open('post', 'server.php', true);

// 4.发送，带有参数时需设置头信息
x.setRequestHeader('content-type','application/x-www-form-urlencoded');
x.send('a=100&b=200');

***
针对服务器返回数组形式的数据：
1、服务器端要使用 json_encode() 转化数据
2、客户端要使用 eval() 函数转变成合法的js数据
***


***
eval() 方法，以JS代码的方式解析字符串，例

eval("alert('这是字符串')"); // 此处虽然是字符串，但是会被转义为 alert('这是字符串')
***

----------------------------------------------------------------
-31> jQuery 获取元素

基本方法获取

// 通过 id 获取
var logo = $('#logo');

// 通过 class 类名获取
var logo = $('.logo');

// 通过标题名获取
var uls = $('ul');

// 并列获取
var logos = $('#logo1, #logo2, #logo3');

// 层级关系获取
var lis = $('#uls li');

// 直系子元素获取
var lis = $('#uls > li');


筛选方法获取

// 获取第一个
var li = $('li:first');

// 获取最后一个
var li = $('li:last');

// 获取指定索引的元素
var li = $('#uls li:eq(1)');

// 获取索引小于某个值的元素
var lis = $('#uls li:lt(3)'); // 此处获取到了第 1、2、3 这三个 li 元素

// 获取索引大于某个值的元素
var lis = $('#uls li:gt(3)'); // 此处获取到了第4 个以后的所有 li 元素

// 获取索引为奇数的元素
var lis = $('#uls li:odd');

// 获取索引为偶数的元素
var lis = $('#uls li:even');

// 获取包含指定文本的元素
var lis = $('#uls li:contains(中国)'); // 此处获取到了所有标签内文本内容包含 中国 的元素

// 获取指定子元素的元素
var lis = $('#uls li:has(".active")'); // 此处获取所有包含 .active 的class类名的元素

// 通过属性来筛选元素
var lis = $('#uls li[name!=n]'); // 此处获取了标签属性中所有 name 不等于 n 的元素，!= 意为 不等于

// 属性值以 a 开头的元素
var lis = $('#uls li[name^=a]'); // 此处获取了标签属性中所有 name 的值以 a 开头的元素， ^ 意为 开始


关系方法获取

// 获取所有标签子元素
var lis = $('#uls').children();

// 获取第一个子元素
var li = $('#uls li:first-child');

// 获取最后一个子元素
var li = $('#uls li:last-child');

// 获取第 n 个子元素
var li = $('#uls li:nth-child(n)'); // 此处获取第 n 个子元素，索引从 1 开始

// 以下 li 为第 n 个子元素
// 获取同辈的下一个的标签元素
var n = li.next();

// 获取同辈的上一个的标签元素
var n = li.prev();

// 获取同辈元素，但不包含自己
var lis = li.siblings();

// 获取元素的父级元素
var n = li.parent();

// 获取元素的先辈元素
var ns = li.parents('#uls'); // 小括号内为空时获取所有先辈元素，不为空时进行筛选

// 获取满足条件的元素
var active = $('#uls').find('.active');

----------------------------------------------------------------
-32> jQuery 元素操作

属性操作

// 属性获取
var id = $('#test').attr('id'); // 结果为 test

// 属性设置
$('#test').attr('title','test'); // 给id为 test 的元素设置了 title="test" 属性
$('#test').attr('live', 'abcd'); // 给id为 test 的元素设置了 live="abcd" 属性，其为自定义属性

// 属性移除
$('#test').removeAttr('title');


文本操作

// 文本获取
var html = $('#test').html(); // 可获取元素中包含的子标签
var html = $('#test').text();

// 文本设置
$(‘#test’).html('abc'); // 可解析子标签，此处 abc 替换为 <b>abc</b> 时结果为加粗显示的 abc
$(‘#test’).text('abc');


样式操作
// 样式获取
var width = $('#test').css('width');
var width = $('#test').css('background-color');

// 样式设置
$('#test').css('width','300px'); // 修改的 style 样式
$('#test').css({'width':'400px', 'height':'400px', 'background':'red'}); // 以对象方式添加多样式

// 添加 class 类
$('#test').addClass('class'); // 此处 class 为class类名

// 移除 class 类
$('#test').removeClass('class');

----------------------------------------------------------------
-33>  jQuery 事件操作

// 事件绑定
$('#test').click(function(){...});
或
$('#test').bind('click',function(){...});

// 事件解绑
$('#test').unbind('click');

// 触发事件，并不需要满足事件原本的条件，直接就会触发
$('#test').trigger('click');

// 阻止事件冒泡
$('div').click(function(e){
	$(this).css('background','black');
	e.stopPropagation(); // 阻止事件冒泡，或也可写为 return false
});

// 阻止默认行为
$('a').click(function(e){
	alert('abc');
	e.preventDefault(); // 阻止默认行为，或也可写为 return false
});


// 原生 js 对象转换成 jQuery 对象
var test = document.getElementById('test'); // 原生 js 声明了一个变量 test
$(test).css('border','solid 5px #ddd'); // 此时 jQuery 里直接使用这个变量即可

// jQuery 对象转换成原生 js 对象
$('#test')[0].setAttribute('title','这是一个标题');


// 获取鼠标位置
$('#test').mousemove(function(e){
	var x = e.clientX;
	var y = e.clientY;

	console.log(x + '，‘ + y);
});

//键盘事件
$(window).keydown(function(e){
	var code = e.keyCode;
	console.log(code);
});

----------------------------------------------------------------
-34> jQuery 中 form 表单元素操作

文本框

// 值的获取
var v = $('input[type=text]').val();

// 值的设置
$('input[type=text]').val('这里修改了文本');


单选框

// 值的获取
var v = $('input[type=radio]:checked').val();

// 值的设置
var v = $('input[type=radio][value=0]').val('checked','checked');


多选框

// 值的获取
var arr = [];
var vs = $('input[type=checkbox]:checked').each(function(){
	arr.push($(this).val());
});


下拉框

// 值的获取
var v = $('select').val();

// 文本的获取
var html = $('option:selected').html();

// 值的修改
$('select').val(3);


文本域

// 值的获取
var v = $('textarea').val();

// 值的设置
$('textarea').val(’明天在哪里‘);


按钮

// 设置不可选
$('button').attr('disabled','disabled');
或
$('button')[0].disabled = true;

----------------------------------------------------------------
-35> jQuery 获取相关尺寸

// 元素相对于文档的偏移
var res = $('#small').offset();

// 元素相对于父级元素
var res = $('#small').position();

// 滚动距离
var sl = $(window).scrollLeft();
var st = $(window).scrollTop();

// 元素的宽度和高度
var w = $('#small').width();
var h = $('#small').height();

// 可视区域的宽度和高度 document.documentElement.clientWidth
var cw = $(window).width();
var ch = $(window).height();

// 文档的宽度和高度 document.documentElement.scrollWidth
var cw = $(document).width();
var ch = $(document).height();

----------------------------------------------------------------
-36> jQuery 节点操作

// 现有 <button>尾部插入</button><button>头部插入</button><div id="content"></div>

var btns = $('button');
var content = $('#content');

// 在内部尾部插入元素
btns.eq(0).click(function(){
	var div = createDiv();
	content.append(div); // // 在尾部插入 div 元素，或 div.appendTo(content)
});

// 在内部头部插入元素
btns.eq(1).click(function(){
	var div = createDiv();
	content.prepend(div); // // 在头部插入 div 元素，或 div.prependTo(content)
});


// 创建新 div 元素
function createDiv(){
	// 创建 div 元素
	var div = $('<div class="item" title="abc">这是一个DIV</div>');
	// 修改 div 背景颜色
	div.css('background','rgb('+rand(0,255)+','+rand(0,255)+','+rand(0,255)+')');
	div.click(function(){
		// 确认提示框
		var res = confirm('确定要删除吗？');
		if(res){
			// 删除元素 removeChild
			$(this).remove();
		};
	});
	return div;
};

// 创建随机函数
function rand(m,n){
	return Math.ceil(Math.random()*(n-m+1))+m-1;
};


***
// 在外部尾部插入
content.after(div); // 或 div.insertAfter(content)

// 在外部头部插入
content.before(div); // 或 div.insertBefore(content)

// 替换元素
first.replaceWith(last); // 用元素 last 替换掉元素 first ，元素 first 会消失

// 克隆元素
var n = first.clone(); // 克隆元素 first 并赋值给 n ，小括号内增加参数 true 时，同时克隆元素 first 绑定的事件
***